package org.bgi.flexlab.automation.task;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.bgi.flexlab.automation.json.WdlParameter;
import org.bgi.flexlab.automation.json.WdlTask;

import java.io.*;
import java.util.HashMap;

public class TaskWdlBuilder {
    private WdlTask task ;
    private String content ;
    public TaskWdlBuilder(String jsonFile) {
        Gson gson = new Gson() ;
        try {
            Reader jsonReader = new InputStreamReader(new FileInputStream(jsonFile));
            task = gson.fromJson(jsonReader,new TypeToken<WdlTask>(){}.getType()) ;
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public String getWdlString(){
        String message = "##Generated by BGI.\n##Version : "+task.getVersion()+"\n##Task Description : "+task.getDescription()+"\n" ;
        String parameter = "task " + task.getTaskName() + " {\n" ;
        HashMap<String, WdlParameter> par = task.getParameter() ;
        for(String key : par.keySet()){
            if (par.get(key).isOptional()) {
                parameter = parameter + " " + par.get(key).getType() + "? " + key ;
            }else{
                parameter = parameter + " " + par.get(key).getType() + " " + key ;
            }
            if (par.get(key).getDefaultValue()!=null && !par.get(key).getDefaultValue().equals("")){ //
                parameter = parameter + " = "+ par.get(key).getDefaultValue()+"\n" ;
            }else {
                parameter = parameter + "\n" ;
            }
        }


        String command = "\tcommand\t{ \n" + "\t\t"+task.getCommand()+"\n";
        String runTime = "\truntime\t{ \n" + "\t\tbackends:\""+task.getBackends()+"\"\n"+"\t\tsge_queue:\"";
        String output = "" ;
        content = message +  parameter + command + runTime + output ;
        return content;
    }

    public String wdlWriter(String outFile){
        try{
            if (content == null || content.equals("")){
                getWdlString();
            }
            BufferedWriter outWriter = new BufferedWriter(new FileWriter(new File(outFile))) ;
            outWriter.write(content);
            outWriter.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

}
